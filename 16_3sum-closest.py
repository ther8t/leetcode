import bisect


class Solution:

    # """
    # Revision 2:
    # The question is simple enough. The question to which this relates to is 3sum. In that in order to reduce the time complexity we find all the possibilities of two sums and then find the target using hashset.
    # The advantage we have in that problem is that the sum is exactly equal to a value thus finding the exact match is simple enough.
    # Here however we need to find the closest match. It's a linear problem in brute force but finding closest match can be done in logn time if array is sorted.
    # This question can also be done by using bisect.bisect_left(sorted_arr, target - first_val - second_val, lo=starting-index+1-of-second-val) to prevent any overlaps.
    # """
    # def threeSumClosest(self, nums, target):
    #     nums.sort()
    #     closestSum = float('inf')
    #     for i in range(len(nums) - 2):
    #         closestTwoSum = self.twoSumClosest(nums[i + 1:], target - nums[i])
    #         if abs(target - (closestTwoSum + nums[i])) < abs(target - closestSum):
    #             closestSum = (closestTwoSum + nums[i])
    #     return closestSum
    #
    # def twoSumClosest(self, nums, target):
    #     left = 0
    #     right = len(nums) - 1
    #     closestSum = float('inf')
    #
    #     while left < right:
    #         sum = nums[left] + nums[right]
    #         closestSum = sum if abs(target - sum) < abs(target - closestSum) else closestSum
    #         if target == sum:
    #             return sum
    #         elif target < sum:
    #             right -= 1
    #         else:
    #             left += 1
    #     return closestSum
    #
    # def threeSumClosest(self, nums, target):
    #     n = len(nums)
    #     nums.sort()
    #     """
    #     A brilliant optimisation to the existing problem Accepted : 18% -> 88%.
    #     Such a simple edge case to consider.
    #     """
    #     if target <= nums[0] + nums[1] + nums[2]:
    #         return nums[0] + nums[1] + nums[2]
    #
    #     if target >= nums[-3] + nums[-2] + nums[-1]:
    #         return nums[-3] + nums[-2] + nums[-1]
    #
    #     diff = float('inf')
    #     ans = -1
    #     for i in range(n):
    #         for j in range(i + 1, n):
    #             index = bisect.bisect_left(nums, target - (nums[i] + nums[j]), lo=j + 1)
    #             for k in [index - 1, index]:
    #                 if 0 <= k < n and abs(target - (nums[i] + nums[j] + nums[k])) < diff and k not in {i, j}:
    #                     diff = min(diff, abs(target - (nums[i] + nums[j] + nums[k])))
    #                     ans = nums[i] + nums[j] + nums[k]
    #                     if nums[i] + nums[j] + nums[k] > target:
    #                         break
    #
    #     return ans


    # """
    # Attempt #2
    # 97%
    # """
    # def threeSumClosest(self, nums, target):
    #     n = len(nums)
    #     nums.sort()
    #
    #     if target < nums[0] + nums[1] + nums[2]:
    #         return nums[0] + nums[1] + nums[2]
    #
    #     if target > nums[-3] + nums[-2] + nums[-1]:
    #         return nums[-3] + nums[-2] + nums[-1]
    #
    #     diff = float('inf')
    #     ans = -1
    #     for i in range(n):
    #         for j in range(i + 1, n):
    #             """
    #             This j + 1 is a little tricky to understand
    #             Considering i, j k can only be a number which is beyond j + 1 because if it is a number before j,
    #             it must already have been considered in some previous case.
    #             But it apparently doesn't make much of a difference.
    #             """
    #             search_index = bisect.bisect_left(nums, target - (nums[i] + nums[j]), lo=j + 1)
    #             for k in range(search_index - 1, search_index + 1):
    #                 if 0 <= k < n and diff > abs(target - (nums[i] + nums[j] + nums[k])) and k not in {i, j}:
    #                     diff = abs(target - (nums[i] + nums[j] + nums[k]))
    #                     ans = nums[i] + nums[j] + nums[k]
    #
    #                     """
    #                     Another optimisation :
    #                     The diff = 0 is the best solution there can be, no need to look further
    #                     """
    #                     if diff == 0:
    #                         return ans
    #
    #     return ans

    """
    Attempt #2
    """
    def threeSumClosest(self, nums, target):
        nums.sort()
        n = len(nums)

        diff = float('inf')
        closest_sum = -1

        for i in range(n):
            closest_two_sum = self.twoSumClosest(nums[i + 1:], target - nums[i])
            if abs(target - (closest_two_sum + nums[i])) < diff:
                diff = abs(target - (closest_two_sum + nums[i]))
                closest_sum = closest_two_sum + nums[i]

        return closest_sum

    def twoSumClosest(self, nums, target):
        left, right = 0, len(nums) - 1
        closest_sum = float('inf')

        while left < right:
            sum = nums[left] + nums[right]
            closest_sum = sum if abs(target - sum) < abs(target - closest_sum) else closest_sum
            if sum < target:
                left += 1
            elif sum > target:
                right -= 1
            else:
                return closest_sum

        return closest_sum




    # # TLE
    # def threeSumClosest(self, nums, target):
    #     # TLE
    #     closestSum = 5000
    #     for i in range(len(nums) - 2):
    #         for j in range(i + 1, len(nums) - 1):
    #             for k in range(j + 1, len(nums)):
    #                 sum = (nums[i] + nums[j] + nums[k])
    #                 diff = target - sum
    #                 if abs(diff) < abs(target - closestSum):
    #                     closestSum = sum
    #     return closestSum


if __name__ == '__main__':
    print(Solution().threeSumClosest(nums = [-1,2,1,-4], target = 1)) #2
    print(Solution().threeSumClosest(nums = [4,0,5,-5,3,3,0,-4,-5], target = -2)) #-2
    # print(Solution().threeSumClosest(nums = [0,0,0], target = 1))
    # print(Solution().threeSumClosest([990,-592,816,-762,-146,-373,95,363,621,-856,884,231,834,-249,-477,183,35,522,-987,687,-706,51,-224,842,-32,-784,730,-159,-881,-793,700,914,-517,703,709,821,439,644,-524,280,385,898,-187,-950,-773,484,-394,207,318,-941,699], 6707)) #2802
    # print(Solution().threeSumClosest([-907,582,312,696,-686,751,165,117,93,275,-901,-57,821,921,-133,-55,373,623,329,729,735,595,771,574,154,52,-275,-362,-819,197,-206,-829,-255,480,597,-339,-970,-992,-702,432,545,164,-203,966,-629,719,988,505,684,-557,849,-615,12,411,361,15,166,155,384,930,-83,-505,-518,-77,-740,944,-858,433,-69,-510,522,73,-879,-155,875,763,-722,-201,342,-608,314,-744,536,-571,792,107,-491,806,-534,-531,777,587,-538,-132,-222,-590,-993,-135,71,135,-695,750,-64,39,-158,598,-637,-580,382,-583,130,-689,-217,-501,64,-727,-511,-427,922,-111,564,138,-986,409,370,964,175,-312,-626,-309,651,466,908,292,-225,453,50,-862,953,-187,-760,-308,-515,439,-602,-536,524,-622,-33,532,3,-381,-123,-3,-67,682,-765,709,-253,-977,610,-122,969,-114,-585,576,-435,726,57,784,-817,-152,-188,150,991,-790,693,-855,-311,-183,276,549,-569,-390,-353,-963,711,454,66,970,92,456,496,-728,58,237,-844,747,643,-522,-80,136,-918,26,0,-625,631,10,-932,961,-299,-665,-213,-821,-973,14,94,-895,-926,258,339,-383,556,-30,879,-317,-467,-403,701,338,859,483,-881,-472,-273,687,578,-391,566,-17,-343,-239,786,142,710,788,277,252,-568,-954,901,867,182,-827,525,428,-934,83,25,-508,104,-659,-843,-910,-452,-238,-485,-955,124,520,-656,629,-209,-666,-710,633,552,-733,743,464,-36,654,-240,269,213,87,-1000,114,-714,-7,504,628,-408,422,-507,-97,429,-997,810,268,259,501,-874,-935,48,-610,353,33,-423,-261,-335,-173,-489,977,61,727,-868,844,-332,605,-216,-526,249,406,-742,335,-74,638,43,-1,889,523,-634,272,601,-499,-49,-270,398,-591,869,910,-46,435,-453,-699,16,450,385,394,-288,769,-700,-345,-124,-917,567,519,-784,-976,242,987,-2,-547,613,-321,485,-600,-775,-777,-417,65,554,186,-770,706,-552,305,645,293,686,-334,195,656,700,233,762,577,380,-542,979,876,-841,-743,-751,-635,-454,-857,158,795,-90,495,-737,-15,201,334,-244,-815,894,-39,300,352,34,-11,-153,-838,652,-219,-58,-267,-648,518,-296,-177,-741,-150,717,408,-232,-231,-387,-415,56,350,-886,253,367,395,824,572,-54,714,215,-14,-999,-911,470,962,279,848,823,286,858,-549,-214,-523,569,-748,754,307,360,-372,479,-481,-776,766,510,-437,-421,-286,-532,860,-32,-167,801,68,-468,-99,915,313,-773,-671,996,-820,281,-593,-466,-229,-643,139,299,-329,972,-517,-333,120,198,707,-246,-889,648,-305,-783,674,959,333,-938,692,998,193,118,-559,606,28,-707,-832,171,-9,828,-247,374,839,586,817,221,153,-148,-208,306,635,835,244,756,330,283,-48,-496,-752,-119,270,170,-277,-480,561,-905,-971,345,85,-388,112,19,324,127,-199,899,-112,796,-840,-951,-493,404,-897,-218,-38,49,53,658,-645,-426,632,-611,-287,512,-563,745,-207,207,-814,688,900,857,-262,377,-847,-555,722,59,376,-117,926,-215,533,-869,97,-424,-113,-588,-47,797,-18,-543,665,583,274,-230,-409,-592,880,-245,791,-609,916,-612,755,691,956,-456,-980,-586,-202,-328,-276,591,842,327,-352,18,163,-24,-937,223,-771,-393,773,-806,151,-65,862,-650,-786,322,-965,-670,-616,-94,72,364,-175,386,-260,-859,-371,-798,-250,46,837,-210,219,770,443,131,618,282,666,-169,-439,-26,152,303,-290,-825,11,-205,502,893,581,664,-831,744,-354,-43,-974,391,291,679,-667,-358,35,-794,-813,620,-715,-242,-392,-662,-405,799,-91,-193,720,469,-731,937,-498,866,-761,20,-848,424,-170,-360,653,-692,-400,-562,-982,816,-194,-256,508,-476,-433,542,819,-947,265,630,-436,-837,-527,-223,511,2,-854,793,-198,-21,-41,-258,-658,548,226,-931,-729,-785,128,-684,-620,820,-323,-639,514,-621,-165,414,-455,477,-268,-871,982,264,7,-53,-513,251,-939,-913,-655,-792,-369,832,699,-429,-86,948,995,-736,-474,-368,-735,471,474,507,-484,452,-34,-631,-252,187,789,-300,-475,619,-799,-189,-279,728,-688,-778,-108,-884,296,807,-584,184,70,-892,379,105,-292,455,6,176,-71,-149,517,-103,-180,994,344,-726,280,210,-553,-763,-863,-303,-22,-678,-860,-271,236,681,-92,-754,91,412,-464,457,-624,-338,-646,418,941,818,615,624,-344,326,513,-364,781,-876,-972,-84,-861,-266,-115,-116,-349,-434,509,-969,660,381,676,78,-550,718,-399,315,-640,-676,-473,-425,-341,304,401,-37,690,885,850,898,-681,870,423,321,-357,705,625,855,-168,-25,-234,-604,188,-340,-912,798,351,284,290,-181,-459,831,203,809,721,733,776,736,958,800,-720,644,40,-160,-220,678,634,-850,-644,813,472,-487,698,723,-224,1,247,-787,132,-554,826,-129,-578,396,642,732,-835,616,768,-102,-599,403,-185], -5698))
    # print(Solution().threeSumClosest([789,-138,-217,-331,318,-173,44,-967,-843,159,348,-214,489,-533,-667,-34,290,711,867,-690,537,-815,811,-845,-95,957,-800,452,77,-760,-569,-982,731,68,-817,-38,-927,-850,272,-265,-145,189,-749,-550,184,715,-510,-450,-696,-677,-447,496,386,-285,417,-782,627,355,-688,116,-818,1,-29,804,553,286,-634,388,288,-917,-984,633,-188,704,360,188,303,569,-426,-287,831,-503,677,-229,719,182,101,-530,-958,420,-271,-758,865,-861,880,616,207,-523,-502,795,-55,-176,195,-638,-578,643,234,-500,-410,901,-297,274,-748,548,-70,660,-655,470,-463,405,64,4,-768,-196,-18,48,199,-903,-906,758,425,-83,436,-193,-764,-902,827,594,-963,-293,676,103,308,205,-856,344,34,67,-73,-11,-804,998,-361,-221,884,40,-139,387,716,-484,-433,-761,478,347,-746,210,697,964,-467,510,-787,-954,501,-102,-278,-516,-552,-251,-935,-144,538,646,-656,-870,-75,324,-25,429,104,-13,-149,-313,-707,289,351,893,-698,636,967,-825,-514,-790,-101,532,-7,-853,738,180,-521,-978,-866,499,58,822,-744,603,-750,-799,-412,682,43,-961,444,837,690,917,-697,-67,476,-496,163,-72,-687,235,-538,859,-575,655,-678,-703,-66,-596,-831,583,373,-943,-864,-617,423,823,85,969,362,374,-654,-397,955,394,397,-543,529,150,558,-292,-886,-968,251,519,-395,679,-279,-326,-983,-940,-636,960,462,-859,409,-965,-669,506,83,-342,254,449,505,897,666,-266,912,900,-301,-320,680,-498,-366,-378,396,-780,-203,-376,277,122,736,-733,846,-501,-869,484,-683,-879,243,-146,309,725,-468,-839,161,-476,-628,343,-668,54,-151,410,-454,-876,-593,-239,-318,805,-922,-422,570,735,-307,-622,-48,-590,-747,-890,-896,197,264,634,330,325,611,869,896,-157,806,73,526,-303,-803,729,-741,-653,-112,-327,756,-705,84,-224,-19,250,72,442,903,428,866,-84,-517,-513,878,630,702,-615,-594,-572,170,-411,164,-582,-947,891,-629,95,-959,201,-371,-465,493,381,-727,-348,-663,15,100,109,-739,-448,-944,508,-143,-860,-435,706,-387,-854,129,-124,839,518,8,699,776,341,-966,350,860,599,-315,753,582,542,653,940,-820,-724,215,-728,796,-255,-186,550,-155,-114,609,1000,671,241,7,-915,194,-808,-632,-245,-699,-47,245,863,368,894,-937,282,5,-587,-863,345,479,700,-482,-333,-999,-767,149,383,885,769,-347,281,972,279,-184,604,-269,-722,187,-671,755,389,-365,261,-322,641,-418,933,-210,-489,545,401,-77,-219,766,807,262,-830,915,411,868,-238,-50,415,-642,-986,-98,311,158,485,-338,-428,416,982,81,-985,-233,50,-973,329,169,-788,820,225,543,841,294,698,810,-807,949,708,521,-32,742,-490,333,730,808,-248,976,-874,128,-421,575,-350,253,-430,-990,-399,-713,-192,649,-263,-528,211,-718,115,-755,-135,456,-694,-709,873,-877,-172,-413,315,413,258,-772,96,-216,223,498,709,-795,-107,902,209,-65,451,-167,956,792,307,-61,565,-941,-908,-607,-956,913,302,727,988,-128,202,119,-329,11,-21,39,473,204,978,-970,-897,692,455,-299,-280,-471,480,-913,-778,-23,-918,-810,-849,-480,802,-598,-439,118,-600,751,-919,-742,125,648,-682,640,-566,-570,-97,628,144,424,20,-606,-1000,-469,55,-199,139,105,459,-425,-666,-934,-554,-834,-355,-725,614,441,393,-675,-562,717,126,247,535,-783,-220,-651,525,-154,813,733,-537,357,481,467,-323,33,-226,504,-352,157,26,-241,-579,-250,-991,300,-745,312,991,779,-497,-180,-316,160,-90,-828,817,240,-893,684,203,-337,-244,16,560,-268,861,-122,192,-94,372,-951,457,631,304,-390,-868,97,-393,488,-762,625,-603,954,596,-925,-522,989,377,857,-479,-867,78,-178,667,378,835,832,-74,644,-720,-855,-546,82,-60,465,-610,-737,-878,-456,517,-82,826,-125,759,851,833,593,854,587,598,754,651,588,-444,-892,213,-542,-394,454,198,-353,-24,-85,-548,872,531,911,293,-78,-416,931,-345,-723,-916,-624,-589,-17,332,-773,801,513,-519,-43,673,-536,-127,-156,-133,668,371,-277,-113,-659,-243,768,237,615,-325,-120,-457,-103,-400,705,-79,124,580,-664,-765,-8,909,942,-91,472,562,486,-895,999,763,840,-367,-2,-379,647,930,571,694,130,-290,379,-763,-693,59,-436,36,-474,877,620,29,392,-252,696,527,231,-701,-821,546,-621,-201,131,-232,760,-332,-527,269,-375,747,-359,-948,-551,147,-213,886,45,65,-240,-202,941,-340,675,608,821,-118,-685,-159,-836,275,380,419,176,-604,990,271,515,-721,-174,183,-626,-204,117,-591,-738,445,579,-829,447,114,992,458,-242,-774,-670,-802,-160,292,-950,260,-464,-714,-770,-209], 6960))
    # print(Solution().threeSumClosest([-860,21,-174,-816,265,492,509,757,339,-831,266,-652,-975,-626,-558,536,-623,-340,-670,741,908,434,-23,-186,-306,506,394,-849,927,610,-619,774,893,329,-980,140,-257,-375,228,-56,-663,-747,-684,807,218,-187,-380,843,-864,569,368], -354)) #-354
    # print(Solution().threeSumClosest([4,0,5,-5,3,3,0,-4,-5], -2)) #-2
    # print(Solution().threeSumClosest([789,-138,-217,-331,318,-173,44,-967,-843,159,348,-214,489,-533,-667,-34,290,711,867,-690,537,-815,811,-845,-95,957,-800,452,77,-760,-569,-982,731,68,-817,-38,-927,-850,272,-265,-145,189,-749,-550,184,715,-510,-450,-696,-677,-447,496,386,-285,417,-782,627,355,-688,116,-818,1,-29,804,553,286,-634,388,288,-917,-984,633,-188,704,360,188,303,569,-426,-287,831,-503,677,-229,719,182,101,-530,-958,420,-271,-758,865,-861,880,616,207,-523,-502,795,-55,-176,195,-638,-578,643,234,-500,-410,901,-297,274,-748,548,-70,660,-655,470,-463,405,64,4,-768,-196,-18,48,199,-903,-906,758,425,-83,436,-193,-764,-902,827,594,-963,-293,676,103,308,205,-856,344,34,67,-73,-11,-804,998,-361,-221,884,40,-139,387,716,-484,-433,-761,478,347,-746,210,697,964,-467,510,-787,-954,501,-102,-278,-516,-552,-251,-935,-144,538,646,-656,-870,-75,324,-25,429,104,-13,-149,-313,-707,289,351,893,-698,636,967,-825,-514,-790,-101,532,-7,-853,738,180,-521,-978,-866,499,58,822,-744,603,-750,-799,-412,682,43,-961,444,837,690,917,-697,-67,476,-496,163,-72,-687,235,-538,859,-575,655,-678,-703,-66,-596,-831,583,373,-943,-864,-617,423,823,85,969,362,374,-654,-397,955,394,397,-543,529,150,558,-292,-886,-968,251,519,-395,679,-279,-326,-983,-940,-636,960,462,-859,409,-965,-669,506,83,-342,254,449,505,897,666,-266,912,900,-301,-320,680,-498,-366,-378,396,-780,-203,-376,277,122,736,-733,846,-501,-869,484,-683,-879,243,-146,309,725,-468,-839,161,-476,-628,343,-668,54,-151,410,-454,-876,-593,-239,-318,805,-922,-422,570,735,-307,-622,-48,-590,-747,-890,-896,197,264,634,330,325,611,869,896,-157,806,73,526,-303,-803,729,-741,-653,-112,-327,756,-705,84,-224,-19,250,72,442,903,428,866,-84,-517,-513,878,630,702,-615,-594,-572,170,-411,164,-582,-947,891,-629,95,-959,201,-371,-465,493,381,-727,-348,-663,15,100,109,-739,-448,-944,508,-143,-860,-435,706,-387,-854,129,-124,839,518,8,699,776,341,-966,350,860,599,-315,753,582,542,653,940,-820,-724,215,-728,796,-255,-186,550,-155,-114,609,1000,671,241,7,-915,194,-808,-632,-245,-699,-47,245,863,368,894,-937,282,5,-587,-863,345,479,700,-482,-333,-999,-767,149,383,885,769,-347,281,972,279,-184,604,-269,-722,187,-671,755,389,-365,261,-322,641,-418,933,-210,-489,545,401,-77,-219,766,807,262,-830,915,411,868,-238,-50,415,-642,-986,-98,311,158,485,-338,-428,416,982,81,-985,-233,50,-973,329,169,-788,820,225,543,841,294,698,810,-807,949,708,521,-32,742,-490,333,730,808,-248,976,-874,128,-421,575,-350,253,-430,-990,-399,-713,-192,649,-263,-528,211,-718,115,-755,-135,456,-694,-709,873,-877,-172,-413,315,413,258,-772,96,-216,223,498,709,-795,-107,902,209,-65,451,-167,956,792,307,-61,565,-941,-908,-607,-956,913,302,727,988,-128,202,119,-329,11,-21,39,473,204,978,-970,-897,692,455,-299,-280,-471,480,-913,-778,-23,-918,-810,-849,-480,802,-598,-439,118,-600,751,-919,-742,125,648,-682,640,-566,-570,-97,628,144,424,20,-606,-1000,-469,55,-199,139,105,459,-425,-666,-934,-554,-834,-355,-725,614,441,393,-675,-562,717,126,247,535,-783,-220,-651,525,-154,813,733,-537,357,481,467,-323,33,-226,504,-352,157,26,-241,-579,-250,-991,300,-745,312,991,779,-497,-180,-316,160,-90,-828,817,240,-893,684,203,-337,-244,16,560,-268,861,-122,192,-94,372,-951,457,631,304,-390,-868,97,-393,488,-762,625,-603,954,596,-925,-522,989,377,857,-479,-867,78,-178,667,378,835,832,-74,644,-720,-855,-546,82,-60,465,-610,-737,-878,-456,517,-82,826,-125,759,851,833,593,854,587,598,754,651,588,-444,-892,213,-542,-394,454,198,-353,-24,-85,-548,872,531,911,293,-78,-416,931,-345,-723,-916,-624,-589,-17,332,-773,801,513,-519,-43,673,-536,-127,-156,-133,668,371,-277,-113,-659,-243,768,237,615,-325,-120,-457,-103,-400,705,-79,124,580,-664,-765,-8,909,942,-91,472,562,486,-895,999,763,840,-367,-2,-379,647,930,571,694,130,-290,379,-763,-693,59,-436,36,-474,877,620,29,392,-252,696,527,231,-701,-821,546,-621,-201,131,-232,760,-332,-527,269,-375,747,-359,-948,-551,147,-213,886,45,65,-240,-202,941,-340,675,608,821,-118,-685,-159,-836,275,380,419,176,-604,990,271,515,-721,-174,183,-626,-204,117,-591,-738,445,579,-829,447,114,992,458,-242,-774,-670,-802,-160,292,-950,260,-464,-714,-770,-209]
# , 6960))
