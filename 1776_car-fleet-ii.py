import heapq


class DSU:
    def __init__(self, elements):
        self.representative = {i: i for i in elements}
        self.size = {i: 1 for i in elements}

    def find(self, element):
        if self.representative[element] == element:
            return element

        self.representative[element] = self.find(self.representative[element])
        return self.representative[element]

    def combine(self, element1, element2):
        representative_element1 = self.find(element1)
        representative_element2 = self.find(element2)

        if representative_element1 == representative_element2:
            return

        # if self.size[representative_element1] > self.size[representative_element2]:
        self.representative[representative_element2] = representative_element1
        self.size[element1] += self.size[element2]
        # else:
        #     self.representative[representative_element1] = representative_element2
        #     self.size[representative_element2] += self.size[representative_element1]


class Solution:
    # # DSU implementation : Surprisingly it is not faster than looping back to update the values of the already collided cars on a new collision.
    # def getCollisionTimes(self, cars):
    #     collision_count = 1
    #     answer = [-1.0 for _ in range(len(cars))]
    #     time_keeper = 0
    #     cars_set = DSU(range(len(cars)))
    #     cars_keeper = set(range(len(cars)))
    #
    #     def get_position(id):
    #         return cars[cars_set.find(id)][0]
    #
    #     def get_speed(id):
    #         return cars[cars_set.find(id)][1]
    #
    #     def update_position(id, value):
    #         if cars_set.find(id) == id:
    #             cars[cars_set.find(id)][0] = value
    #
    #     def update_speed(id, value):
    #         if cars_set.find(id) == id:
    #             cars[cars_set.find(id)][1] = value
    #
    #     while collision_count > 0:
    #         # figure out which cars collide earliest.
    #         min_time_of_collision = float('inf')
    #         cars_collided = []
    #         for i in cars_keeper:
    #             if cars_set.find(i) != i:
    #                 continue
    #             if i + 1 < len(cars) and get_speed(i+1) < get_speed(i):
    #                 time_of_collision = (get_position(i+1) - get_position(i)) / (get_speed(i) - get_speed(i+1))
    #                 if time_of_collision == min_time_of_collision:
    #                     cars_collided.append(i)
    #                 else:
    #                     min_time_of_collision = min(min_time_of_collision, time_of_collision)
    #                     if time_of_collision == min_time_of_collision:
    #                         cars_collided = [i]
    #
    #         for i in range(len(cars)):
    #             if cars_set.find(i) != i:
    #                 continue
    #             update_position(i, get_position(i) + get_speed(i) * min_time_of_collision)
    #             if i in cars_collided:
    #                 cars_set.combine(i+1, i)
    #                 #
    #                 cars[i][1] = cars[i + 1][1]
    #                 # update_speed(i, get_speed(i+1))
    #                 answer[i] = time_keeper + min_time_of_collision
    #                 # for j in range(i, -1, -1):
    #                 #     if answer[j] != -1:
    #                 #         cars[j][0] = cars[i][0]
    #                 #         cars[j][1] = cars[i + 1][1]
    #                 #     else:
    #                 #         break
    #                 cars_keeper.remove(i)
    #
    #         time_keeper += min_time_of_collision
    #         collision_count = len(cars_collided)
    #
    #     return answer

    # TLE
    def getCollisionTimes(self, cars):
        collision_count = 1
        answer = [-1.0 for _ in range(len(cars))]
        time_keeper = 0
        cars_set = set(range(len(cars)))

        while collision_count > 0:
            # figure out which cars collide earliest.
            min_time_of_collision = float('inf')
            cars_collided = []
            for i in cars_set:
                if i + 1 < len(cars) and cars[i + 1][1] < cars[i][1]:
                    time_of_collision = (cars[i + 1][0] - cars[i][0]) / (cars[i][1] - cars[i + 1][1])
                    if time_of_collision == min_time_of_collision:
                        cars_collided.append(i)
                    else:
                        min_time_of_collision = min(min_time_of_collision, time_of_collision)
                        if time_of_collision == min_time_of_collision:
                            cars_collided = [i]

            for i in range(len(cars)):
                cars[i][0] = cars[i][0] + cars[i][1] * min_time_of_collision
                if i in cars_collided:
                    cars_set.remove(i)
                    cars[i][1] = cars[i + 1][1]
                    answer[i] = time_keeper + min_time_of_collision
                    for j in range(i, -1, -1):
                        if answer[j] != -1:
                            cars[j][0] = cars[i][0]
                            cars[j][1] = cars[i + 1][1]
                        else:
                            break

            time_keeper += min_time_of_collision
            collision_count = len(cars_collided)

        return answer

    """
    The idea about monotonic stack works only when we move from right to left.
    We need to make sure that we keep searching for the car which we can collide with before it collides with others OR
    the last car of the fleet. Why the last car of the fleet? And why find a car which we can collide with BEFORE it collides with the next car, why not afterwards?
    Think. If we collide with a car which has already collided with a couple of cars, it's similar to colliding with the last car in this collided fleet of cars.
    
    Then why can't we not collide with the next car because if it is collided with it's next car they would have the same speed at the last car in the fleet?
    Because it's very tough to keep track of the cars because it's an expensive operation to update cars behind the last car of the fleet.
    For example: Imagine these are cars, not their speeds. When they collide it forms a fleet.
    1 2 3 4 5 -> 1 (2 3) 4 5 -> 1 (33 4) 5 -> 1 (444 5)
    The operation to change 2 -> 3 is simple enough, but to change 33 fleet after it collides with 4, we would need to change both 3s.
    The other way is to keep deleting such cars which have already collided. This is what stack.pop() in (1) does.
    """
    # Accepted 98%
    def getCollisionTimes(self, cars):
        n = len(cars)
        out = [-1.0] * n

        stack = []
        for i in range(n - 1, -1, -1):
            pos, speed = cars[i][0], cars[i][1]
            # remove all the faster moving cars than the current - they would reach the end before this and not collide.
            while stack and cars[stack[-1]][1] >= cars[i][1]:
                stack.pop()
            # Now I need to find the car whose time to collide is more than my time to collide with it.
            # OR it's the last car in the fleet, meaning, although there may be cars ahead of it but it is the last car we can possibly collide with, which cannot catch the next car.
            while stack:
                time = (cars[stack[-1]][0] - pos) / (speed - cars[stack[-1]][1])
                if time <= out[stack[-1]] or out[stack[-1]] == -1:
                    break
                stack.pop() # -- (1). This basically deletes all the cars which have collided, so we can have an easy access to the last car of the fleet. This works because it's older time of collision < time.

            out[i] = time if stack else -1

            stack.append(i)

        return out

    # TLE : This TLEs most probably because the find next and previous index is an O(n) operation.
    def getCollisionTimes(self, cars):
        n = len(cars)
        pq = []
        collided = set()
        out = [-1.0] * (len(cars))

        for i in range(len(cars) - 1):
            if cars[i + 1][1] < cars[i][1]:
                heapq.heappush(pq, ((cars[i + 1][0] - cars[i][0]) / (cars[i][1] - cars[i + 1][1]), i))

        while pq:
            time, index = heapq.heappop(pq)
            if index in collided:
                continue
            collided.add(index)
            out[index] = time
            prev_index, next_index = -1, n
            for i in range(index + 1, n):
                if cars[i]:
                    next_index = i
                    break

            for i in range(index - 1, -1, -1):
                if cars[i]:
                    prev_index = i
                    break

            if next_index < n and prev_index >= 0 and cars[prev_index][1] > cars[next_index][1]:
                front_car_distance, front_car_speed = cars[next_index][0], cars[next_index][1]
                behind_car_distance, behind_car_speed = cars[prev_index][0], cars[prev_index][1]

                heapq.heappush(pq, ((front_car_distance - behind_car_distance) / (behind_car_speed - front_car_speed), prev_index))
            cars[index] = None

        return out

    """
    This problem presents a particular challenge. The challenge is to figure out the next car my current car will collide with.
    The problem can be a straightforward monotonic or solved using priority queue. Both of which I had figured out in my second/current attempt.
    But the issue with finding the colliding car is not to find the first car which has a speed lower than yourself because it is possible that that car could have a speed even lower because it would have collided with a car ahead of it much before it had the chance to catch up.
    But you can also collide with a car ahead of you even if you were initially moving relatively apart 5 3 1 -> 5 1 1 -> 1 1 1
    
    The idea with each is to find the next car which we can collide with.
    """

    """
    Revision 2:
    Accepted 69%
    """
    def getCollisionTimes(self, cars):
        n = len(cars)
        out = [0.0] * n
        out[-1] = -1.0

        stack = []
        for i in range(n - 1, -1, -1):
            """
            first I need to remove all the cars in front of me which are faster than my car. Why?
            1. Because either my current car collides with the car just ahead of it, given the current car is going faster than the car ahead. OR
            2. It may effectively collide with a slower car much ahead of it, because it eventually slowed down the car just ahead of the current car. 3 5 1 -> 3 11 -> 1 1 1 OR
            3. It may never collide with a car which means that either the current car is the last car in the array or the slowest car in the fleet and every other car ahead of it is faster. 
            
            In the first case I have the faster car so no need to eliminate any faster car.
            In the second case I have a slower car than the faster car but there is an even slower car ahead of me. After the cars in front of me collide, would I get to collide, but effectively I would be colliding with the slowest car ahead of me. It owuld only make sense to remove all the cars which are faster than that car.
            In the third case I would not discover a car which is slower than myself, so I could not possibly collide. Time would then be -1. 
            """
            while stack and cars[stack[-1]][1] >= cars[i][1]:
                stack.pop()

            time = -1.0
            for j in range(len(stack) - 1, -1, -1):
                time = (cars[stack[j]][0] - cars[i][0]) / (cars[i][1] - cars[stack[j]][1])
                if time <= out[stack[j]] or out[stack[j]] == -1.0:
                    break
                stack.pop()

            out[i] = time
            stack.append(i)

        return out


    """
    Attempt:Fired
    Wrong Answer
    This is because although there might be a car which our current car collides with, but there might be another car ahead of the previous car which might cause the collision much earlier.
    """
    def getCollisionTimes(self, cars):
        n = len(cars)
        out = [-1.0] * n
        stack = []

        for i in range(n):
            while stack and cars[stack[-1]][1] > cars[i][1]:
                crashed_index = stack.pop()
                out[crashed_index] = abs(cars[crashed_index][0] - cars[i][0]) / abs(cars[crashed_index][1] - cars[i][1])
            stack.append(i)

        return out

    def getCollisionTimes(self, cars):
        n = len(cars)
        out = [-1.0] * n
        stack = [n - 1]

        """
        This attempt is interesting, so I'm going to leave it at that.
        What's happened here is that for a car, the cars in front of it which are moving away from it (have greater speed), have no way of colliding. So, we pop them from the stack because if our car can't collidee with them so can't the cars behind me.
        Now the cars in front of me are all the cars which have a speed less than mine. But our car can effectively collide with any of them. Out of three cars, the second car can collide with the third car before our car collides with the second car. Thus effectively colliding with the first car. OR
        Our car can simply collide with the second car.
        This is the story of popping which was alright.
        """
        for i in range(n - 2, -1, -1):
            while stack and cars[i][1] <= cars[stack[-1]][1]:
                stack.pop()
                continue

            """
            This is where the story gets interesting. I have to search the entire array to find out which has the least time of collision. There maybe a case where the slowest car is the rightmost car and every other car collides because of that.
            In that case every incoming car has to search the array to the very end. Worst case.
            But, our car collides with the car in the front of it, so either our car collides with the car in the front before it collides with others at time 't' OR
            the time of collision of the car in the front < t
            """
            if stack:
                out[i] = min([abs(cars[j][0] - cars[i][0]) / abs(cars[j][1] - cars[i][1]) if cars[j][1] != cars[i][1] else float('inf') for j in stack])
            stack.append(i)
        return out


if __name__ == '__main__':
    print(Solution().getCollisionTimes(cars = [[1,2],[2,1],[4,3],[7,2]]))
    print(Solution().getCollisionTimes(cars = [[3,4],[5,4],[6,3],[9,1]]))
    print(Solution().getCollisionTimes([[1,4],[4,5],[7,1],[13,4],[14,3],[15,2],[16,5],[19,1]]))
    print(Solution().getCollisionTimes(cars=[[860,58],[1443,27],[1615,28],[1618,25],[2729,37],[3196,41],[3786,65],[3885,47],[4225,13],[4671,7],[5284,66],[6224,39],[6611,52],[6715,55],[6905,5],[6930,50],[8680,62],[9286,11],[9745,7],[9862,35],[10047,20],[11028,2],[11147,55],[11361,43],[11714,9],[11862,24],[12121,19],[12303,46],[12514,26],[12733,33],[13071,3],[13792,17],[15400,56],[15559,48],[16051,12],[16264,65],[16318,2],[17236,36],[17250,26],[17366,14],[17388,66],[17434,66],[17954,13],[18039,66],[18231,15],[18931,49],[18997,57],[19064,11],[19457,6],[19696,47],[19946,49],[20077,14],[20309,21],[21743,35],[22279,52],[22423,66],[24111,50],[24526,51],[24809,65],[24981,37],[25100,25],[25114,39],[25625,2],[25971,8],[26033,9],[26469,35],[26721,37],[26832,25],[27018,41],[27529,62],[28511,38],[28852,4],[29543,19],[30813,13],[31388,54],[31857,20],[32215,26],[33591,30],[33621,60],[34799,42],[35815,5],[36078,4],[36616,56],[36696,57],[36878,26],[37342,12],[37987,4],[38222,8],[39865,52],[40107,34],[40781,13],[40791,17],[41151,9],[41431,64],[43198,64],[43692,65],[44203,13],[44844,5],[45468,29],[46093,8],[46368,21],[46907,21],[46927,19],[47054,62],[47577,46],[47647,21],[47664,65],[47872,25],[48310,13],[48977,31],[49438,66],[49670,13],[50533,2],[50588,29],[50864,46],[51336,62],[53428,12],[53635,24],[53775,44],[53900,35],[54205,22],[54241,28],[54638,28],[55110,9],[55607,65],[56650,57],[57206,30],[57300,21],[58038,24],[58355,11],[58442,20],[59692,43],[60076,28],[60362,34],[60499,59],[60677,56],[61526,13],[61646,65],[61831,41],[61978,8],[62842,7],[63420,18],[63602,63],[63969,39],[64297,7],[65808,53],[65890,15],[65955,19],[66020,50],[66080,52],[67625,65],[67728,34],[68946,2],[69128,28],[69368,17],[69554,64],[69612,62],[69714,66],[70183,34],[70285,5],[70568,47],[70606,30],[71434,63],[71475,12],[71752,34],[71841,10],[72452,4],[72915,18],[73114,47],[73231,66],[73427,9],[73625,65],[74206,61],[74540,61],[76168,36],[76239,32],[77270,28],[77329,27],[78741,66],[78877,41],[80122,27],[80958,4],[81094,6],[81484,30],[81565,37],[83840,32],[84115,64],[84463,2],[84485,32],[84664,56],[84700,29],[86335,27],[86396,57],[86619,10],[86737,10],[86850,3],[87665,13],[87779,37],[87998,12],[88194,34],[89002,12],[89391,30],[90046,34],[90157,42],[90214,34],[90225,44],[90472,12],[90483,35],[90632,54],[90699,55],[90731,1],[90778,54],[90994,63],[91476,9],[92116,62],[92501,5],[92921,66],[92980,20],[92994,26],[93080,48],[93092,25],[93116,52],[94394,33],[95042,16],[95140,43],[95390,42],[95608,48],[95612,22],[95875,49],[96014,33],[96734,27],[97318,42],[97352,48],[97596,25],[97816,13],[97910,24],[98061,8],[98563,53],[99024,11],[99797,33],[100891,28],[101201,63],[101455,36],[101579,10],[101672,43],[101933,27],[102358,21],[102914,43],[103025,32],[103764,26],[103999,32],[104002,57],[104185,50],[105047,47],[105083,6],[105825,6],[106094,18],[106189,41],[106664,61],[107191,7],[107280,48],[107516,55],[107547,54],[107690,2],[108166,14],[109822,17],[110023,3],[110256,19],[110265,49],[110491,53],[110492,40],[111057,6],[111340,12],[111557,23],[112134,31],[112444,66],[112629,24],[112636,33],[113391,54],[113658,60],[113931,40],[114119,12],[114515,66],[114577,44],[114834,40],[115344,16],[115397,15],[115492,45],[116136,49],[116741,57],[117120,22],[118742,63],[118777,9],[118835,51],[119127,33],[119308,4],[119309,15],[119352,7],[119901,9],[120154,64],[120365,22],[121378,49],[121514,47],[122556,53],[122774,66],[123195,66],[123402,40],[123554,14],[123928,65],[124015,34],[124160,33],[124189,58],[124905,47],[125079,42],[125205,52],[126238,45],[126850,23],[127864,21],[128003,6],[128852,49],[129643,31],[130407,31],[130415,27],[130559,10],[130662,30],[130844,35],[131149,24],[132127,49],[132267,13],[132392,7],[132576,63],[133716,15],[133958,58],[133991,49],[134315,21],[134527,30],[135525,10],[135655,24],[136212,65],[137085,46],[137460,55],[138090,51],[138757,66],[138836,47],[138956,35],[139030,15],[139522,55],[139620,66],[139815,63],[140127,26],[140367,36],[141722,53],[142321,35],[142655,53],[143454,22],[144013,29],[144879,1],[145129,27],[145594,38],[145654,63],[145793,15],[146120,25],[146218,15],[146731,5],[147511,37],[147515,31],[147744,20],[148212,4],[148246,42],[148933,63],[149278,40],[149292,5],[150474,44],[150646,25],[151017,26],[151331,57],[151492,1],[152267,25],[152782,36],[153525,50],[154710,3],[155104,12],[155815,62],[156012,19],[156656,13],[156829,7],[157034,51],[157072,13],[158380,61],[158700,12],[159743,5],[159967,23],[160264,36],[160330,61],[161324,55],[161529,7],[162243,11],[162305,21],[162749,22],[163015,22],[163334,1],[163499,57],[164040,17],[164519,28],[165055,2],[165103,43],[165114,57],[165750,2],[166175,40],[166692,16],[166935,4],[167345,58],[167651,13],[168234,60],[168269,10],[168374,36],[168733,57],[169341,45],[169802,38],[170406,40],[170672,53],[170689,60],[171135,19],[173149,49],[173362,44],[173396,2],[174779,11],[174967,35],[175179,28],[175940,8],[176572,15],[176715,19],[177963,58],[178744,61],[179468,17],[179748,3],[180009,49],[180835,52],[180856,41],[181996,4],[182464,42],[182695,2],[183352,56],[184062,43],[184918,22],[185177,53],[185238,12],[185661,28],[185868,50],[185908,40],[186019,15],[186357,25],[186589,14],[186982,51],[187216,24],[187297,35],[188015,36],[188487,33],[188600,13],[188697,61],[189445,30],[189799,26],[190854,21],[191117,5],[191578,59],[191919,29],[192035,8],[192046,59],[192128,66],[192168,33],[192422,55],[192604,42],[192645,4],[192733,41],[192758,6],[192951,21],[194073,50],[194787,6],[195649,44],[196318,39],[196325,42],[197572,10],[197674,52],[197913,54],[197946,14],[198147,22],[198622,30],[199158,10],[199232,7],[199621,41],[199786,17],[199826,39],[200068,15],[200444,21],[200966,20],[201133,5],[201690,29],[202057,37],[202505,37],[202781,64],[203059,52],[203144,31],[203284,30],[203892,49],[204005,26],[204239,47],[204341,46],[204447,58],[204909,66],[205027,51],[205132,28],[205319,5],[205325,57],[205683,29],[205714,7],[206543,60],[206595,1],[206882,65],[207026,30],[207809,40],[208342,22],[208599,53],[208999,43],[209836,17],[210150,44],[211578,31],[211677,57],[211687,40],[212141,40],[212447,38],[212611,34],[213007,65],[213008,33],[215488,7],[215544,58],[215558,35],[216009,32],[217050,60],[217087,3],[217333,57],[217369,60],[218064,15],[219002,41],[219183,56],[219654,28],[220030,15],[220191,55],[220884,10],[222239,40],[222246,17],[223276,33],[223962,61],[224119,31],[224427,8],[224573,6],[225348,43],[226002,8],[226961,66],[227017,41],[227341,8],[227601,58],[227918,10],[228417,56],[228722,18],[229814,2],[230052,46],[230206,42],[230743,14],[231483,63],[231646,40],[232198,29],[232341,13],[233668,47],[234221,51],[234331,31],[234568,19],[234692,53],[235336,33],[236613,20],[237354,21],[237392,9],[237542,54],[237711,38],[238400,11],[238679,9],[239401,8],[239477,18],[239733,13],[240039,19],[240050,21],[240096,33],[240527,33],[240864,51],[241483,45],[241592,6],[241602,65],[242572,66],[242643,28],[242716,25],[242747,36],[243942,64],[243999,22],[244431,18],[244614,56],[244958,11],[245026,61],[246119,36],[246394,6],[246688,66],[246731,45],[247076,47],[247210,43],[247949,33],[248263,7],[248363,54],[248668,51],[249211,17],[249456,52],[249992,2],[250234,19],[250298,37],[250436,37],[250449,10],[250511,55],[251466,64],[251674,40],[251908,32],[252029,23],[252107,57],[252908,34],[253045,30],[253106,24],[253165,21],[253645,66],[253863,24],[253954,39],[254075,24],[254697,37],[255293,54],[255356,53],[255539,35],[255750,33],[256074,22],[256316,47],[256393,54],[256520,47],[256646,25],[257473,33],[257554,6],[257662,19],[257786,29],[257968,10],[258090,53],[258387,28],[258970,9],[259372,64],[259460,29],[259610,51],[260010,43],[260133,37],[260151,46],[261349,3],[261811,24],[262021,65],[262278,28],[262283,13],[262942,1],[263136,35],[263789,62],[263904,53],[264858,63],[264907,40],[265034,64],[265159,50],[265521,24],[265618,45],[265796,14],[266005,33],[266306,5],[266479,29],[266575,29],[266643,60],[268577,53],[268676,54],[269428,49],[269679,34],[269949,63],[270166,40],[270654,35],[271053,11],[271135,1],[272048,29],[272151,19],[272275,30],[272359,33],[272827,30],[273944,46],[274361,2],[274464,12],[274863,8],[275043,6],[276212,28],[276267,29],[276348,12],[276377,39],[276687,61],[276751,66],[276874,34],[277408,54],[278257,3],[279442,62],[279680,28],[279715,54],[279788,50],[279949,2],[279980,57],[280946,36],[281201,41],[281334,16],[282098,13],[282472,20],[283451,66],[284163,2],[284509,35],[285845,35],[286195,10],[286643,12],[286767,66],[286796,65],[288231,12],[288369,21],[288475,7],[288852,47],[288977,28],[289540,3],[289949,49],[291167,14],[291279,33],[291983,41],[292004,45],[292640,51],[292872,66],[293369,22],[293375,61],[293690,1],[293734,26],[294103,45],[294173,20],[294789,40],[295684,61],[296134,49],[297545,53],[297879,59],[299441,12],[299998,66],[301257,49],[301420,41],[301600,38],[302004,51],[302124,13],[302382,53],[303039,16],[304620,13],[305036,39],[305109,20],[305207,64],[305364,61],[305568,33],[305987,6],[306621,58],[306755,40],[309068,14],[309255,46],[309440,10],[309525,6],[311289,59],[312290,32],[312417,59],[313003,35],[313925,27],[315097,54],[315208,14],[316286,59],[316343,34],[316377,59],[316406,26],[317551,33],[317884,39],[318602,24],[319144,50],[319334,18],[319675,64],[319778,27],[319790,12],[320173,5],[320752,58],[321034,53],[321644,4],[322112,57],[322467,25],[322485,37],[322634,23],[323074,48],[323164,49],[323337,59],[323754,63],[324335,47],[325731,8],[326231,34],[326617,31],[327004,6],[327181,41],[327226,25],[327425,57],[327516,29],[328071,54],[328326,15],[330420,56],[330739,54],[331148,9],[331300,10],[331313,11],[331626,8],[331980,63],[332078,48],[332379,22],[332464,48],[332719,40],[334892,31],[334972,36],[335621,29],[335631,16],[335704,24],[335876,52],[336046,37],[336319,66],[336885,13],[336994,58],[337032,37],[337258,12],[337658,53],[338495,18],[338592,39],[338736,23],[339109,29],[339198,50],[339204,15],[339356,10],[339571,17],[339824,54],[341019,41],[342993,64],[343239,54],[343277,3],[343347,1],[343417,32],[344096,26],[344120,41],[345245,9],[346315,41],[346968,45],[347246,15],[347867,57],[348063,34],[348268,25],[348343,63],[348649,55],[348996,31],[349155,61],[349505,4],[349963,1],[350073,19],[350557,48],[350759,2],[351330,14],[351441,13],[351778,22],[352066,66],[352321,3],[352827,38],[353340,27],[353999,65],[354271,63],[354434,31],[354893,34],[355547,16],[355954,41],[356168,7],[356901,53],[357124,14],[358190,61],[358735,30],[360105,32],[360412,32],[360600,33],[361074,16],[361764,46],[361936,46],[362161,59],[362412,65],[363127,15],[363603,46],[364016,43],[364175,45],[364575,35],[364803,54],[365007,46],[365046,27],[365316,50],[366249,55],[366290,9],[366311,9],[366596,62],[367090,53],[368945,24],[369026,5],[369410,41],[369885,39],[369898,16],[369901,32],[369950,4],[370019,42],[370173,22],[370336,54],[370421,32],[370745,43],[370885,39],[371408,20],[372235,11],[372642,18],[373194,54],[373639,60],[373874,16],[373905,57],[375003,28],[375179,22],[375537,8],[375710,14],[375767,6],[375772,7],[376068,62],[376350,24],[377115,17],[377706,16],[378032,52],[378704,50],[379358,8],[379527,51],[379562,5],[379666,39],[380116,12],[380618,49],[380731,1],[381109,42],[381185,7],[381277,17],[381330,10],[381491,60],[381891,32],[382042,41],[382065,45],[382157,17],[382434,1],[382463,8],[382514,21],[384848,41],[384907,65],[385331,37],[385779,6],[386109,23],[387052,4],[387374,62],[387632,64],[387936,55],[388216,4],[388289,54],[388737,13],[388963,26],[389830,26],[391084,42],[392049,55],[392647,26],[393843,21],[394566,11],[395095,20],[395325,17],[396553,7],[397389,52],[397850,12],[398035,61],[398216,25],[398420,4],[399642,59],[399648,3],[400093,36],[400432,41],[401833,43],[402072,3],[404240,29],[404831,59],[404871,29],[406944,58],[407518,10],[407714,28],[408471,19],[408636,40],[408722,7],[409071,48],[409091,65],[409099,26],[409914,54],[409973,24],[410005,13],[410050,44],[410230,5],[410712,11],[410753,45],[411330,39],[411676,6],[411943,18],[413197,33],[413586,57],[413795,34],[413946,8],[414861,35],[414959,52],[415820,54],[415840,41],[416069,1],[416174,30],[416277,63],[416486,23],[416909,5],[417234,38],[418426,33],[418543,31],[418820,25],[419550,14],[421241,6],[421371,54],[421469,57],[421479,21],[421607,47],[422117,64],[423060,46],[423097,43],[423226,11],[423456,23],[423568,23],[423595,53],[423622,35],[423745,64],[423864,23],[423970,56],[424309,37],[424700,31],[424736,49],[424830,33],[425469,26],[426015,49],[426667,47],[427201,23],[428269,38],[428324,11],[430159,61],[430300,52],[430478,44],[430564,25],[430587,28],[431047,4],[432665,12],[433051,18],[433144,36],[433504,37],[433842,22],[434236,15],[434309,33],[435496,26],[435968,2],[436330,49],[438116,64],[438298,1],[438781,5],[439329,45],[439484,8],[440106,19],[440277,53],[441220,61],[441258,27],[441874,63],[442056,30],[442312,35],[442442,40],[443746,21],[444655,4],[445035,9],[445150,52],[445168,25],[445691,22],[446821,9],[447019,63],[447141,50],[447265,34],[447612,56],[448066,66],[448524,47],[448528,20],[448706,16],[449344,35],[449599,31],[449788,22],[449812,47],[450158,64],[450313,14],[450495,30],[450507,64],[451213,33],[451551,19],[451612,63],[451700,53],[451813,24],[451938,62],[451992,10],[452198,32],[452267,48],[452283,6],[452661,48],[452801,24],[453242,25],[454378,9],[454872,11],[454924,31],[455504,49],[455921,6],[456740,64],[457163,4],[457176,21],[457229,27],[458037,11],[458843,17],[459531,3],[460078,60],[460238,3],[460383,65],[460519,16],[461674,9],[461961,12],[462566,35],[462694,17],[462755,60],[463009,19],[463478,62],[463509,35],[463703,42],[463798,45],[464490,16],[464791,20],[464904,7],[465368,57],[465542,41],[466428,66],[466469,11],[467210,6],[467238,55],[467811,58],[468562,52],[468583,43],[469152,55],[470150,1],[470322,35],[470351,14],[470819,30],[471615,6],[471901,39],[472178,58],[472245,9],[472289,58],[472426,59],[472756,66],[473017,26],[473110,37],[473482,41],[475003,62],[475093,8],[475311,44],[475373,57],[475683,55],[475768,8],[476109,27],[476124,61],[476782,63],[477545,17],[477608,1],[477778,13],[478979,4],[479298,34],[479300,21],[479575,43],[480929,15],[481388,11],[481457,11],[482515,14],[482605,3],[482672,7],[482884,6],[482906,37],[485028,21],[485189,56],[486745,31],[487258,16],[487637,24],[487641,66],[487949,56],[488256,1],[488709,56],[488717,49],[488741,33],[488814,12],[488873,1],[488991,19],[489157,48],[489224,60],[490076,63],[490500,65],[490978,38],[491330,30],[491578,52],[491740,11],[491854,49],[492117,4],[492322,15],[492396,53],[492402,47],[492657,13],[492782,7],[493508,16],[493550,19],[493609,5],[493975,38],[494034,39],[494352,13],[494480,1],[495193,66],[496705,13],[496884,51],[497380,39],[497725,55],[497856,47],[497954,36],[498032,35],[498131,2],[498470,6],[498607,11],[498772,58],[498946,62],[499480,18],[500030,56],[501322,51],[502188,38],[502696,64],[502751,17],[503183,16],[503409,48],[503469,15],[503732,22],[503761,35],[504201,19],[504231,23],[504363,35],[505328,65],[505347,10],[505584,55],[505886,9],[506347,65],[506388,4],[507255,33],[507737,22],[507871,28],[508121,8],[509055,48],[509776,10],[509850,28],[510343,29],[511191,35],[511263,42],[511611,3],[511848,26],[511889,6],[511983,9],[512018,8],[512773,37],[513240,28],[513311,23],[513317,48],[513337,32],[513349,51],[513390,26],[513636,57],[515739,2],[515921,7],[516977,7],[517231,53],[517289,16],[517332,63],[517604,22],[517641,59],[517703,64],[517973,43],[518124,60],[518463,29],[518523,16],[518600,56],[518648,12],[519042,29],[519581,43],[519753,52],[520046,51],[520385,26],[520575,10],[520765,16],[520858,40],[521530,65],[521594,57],[522075,33],[522502,49],[522628,11],[522766,25],[523579,10],[524293,46],[526246,5],[527094,49],[527227,46],[527553,4],[528399,45],[528472,63],[529801,9],[529920,54],[530570,31],[530860,2],[530913,53],[531033,34],[531091,32],[531307,47],[531459,30],[531768,66],[532504,57],[533061,9],[533760,4],[533962,42],[534746,50],[534959,62],[535144,62],[535319,32],[536378,54],[537279,26],[537377,28],[538140,45],[538297,58],[538515,22],[538787,41],[539232,23],[539266,41],[539393,49],[539551,38],[540242,45],[540333,18],[541107,15],[541151,11],[542465,6],[543326,10],[544208,15],[544501,59],[545441,51],[545569,45],[545779,50],[546115,25],[546247,10],[546486,14],[547187,57],[547475,60],[548562,4],[548882,12],[549232,65],[549346,5],[549461,39],[550139,28],[550245,51],[550389,47],[550497,63],[551524,44],[551816,55],[552066,49],[552125,6],[552468,44],[553530,35],[554020,17],[554086,38],[554338,66],[554579,62],[554907,38],[555459,7],[555512,12],[555872,13],[556822,50],[557443,45],[557581,41],[557585,26],[557775,26],[558078,23],[558308,6],[558479,22],[558503,9],[559009,16],[559510,1],[560400,39],[560694,30],[561295,53],[562638,18],[562724,56],[562764,61],[563000,15],[563394,47],[563530,44],[563969,59],[564162,39],[564229,26],[564362,50],[566091,21],[567885,9],[568480,20],[569475,35],[570176,1],[570323,43],[570413,49],[572440,45],[572513,57],[573377,41],[573419,33],[573757,51],[575235,29],[575808,42],[575845,12],[577068,58],[577700,59],[580757,29],[581460,32],[582055,38],[582570,10],[585086,47],[585104,62],[586694,23],[586732,43],[587651,25],[587819,55],[588078,55],[588368,3],[588933,66],[589318,52],[589719,27],[589993,58],[590718,49],[591239,21],[592435,6],[593158,8],[593175,2],[593924,42],[594130,12],[594174,46],[594651,49],[595189,26],[595212,48],[596507,60],[596742,39],[596798,11],[597146,35],[597157,11],[597432,59],[597915,23],[598294,55],[598942,10],[599030,4],[599088,58],[599943,13],[600474,48],[600498,64],[600662,61],[601033,5],[601281,25],[601375,10],[602872,27],[603264,29],[603573,34],[604433,12],[604992,22],[605291,42],[605617,66],[607076,21],[607867,5],[608700,3],[609846,49],[610173,13],[610222,46],[610421,55],[610891,13],[611122,27],[612301,57],[612420,27],[612719,62],[612923,40],[613096,44],[613742,47],[614345,45],[614409,33],[614613,1],[614746,41],[614747,36],[614762,20],[615354,63],[616358,38],[616757,29],[616784,11],[616821,40],[617096,48],[617494,44],[617699,26],[617880,52],[617956,50],[618192,32],[619493,23],[621487,8],[621901,51],[623064,33],[623183,58],[623580,6],[623808,52],[623988,50],[625297,4],[625504,25],[625522,64],[625585,48],[625677,64],[625923,32],[626588,11],[626885,62],[628157,19],[628181,52],[628269,66],[628501,35],[629147,22],[629398,1],[630051,4],[630326,5],[630557,37],[630738,51],[630841,37],[630860,17],[631476,55],[631786,36],[631817,50],[632289,55],[633406,47],[634198,40],[634757,63],[634953,40],[635133,30],[635312,54],[635417,39],[635699,65],[635938,38],[635955,52],[635956,1],[635965,48],[637377,65],[637748,28],[637899,41],[638684,42],[638686,55],[638802,49],[639281,7],[640139,37],[641736,23],[643349,51],[644596,7],[645155,3],[645504,53],[645759,6],[646126,40],[646546,39],[647049,53],[647469,57],[647537,6],[647777,45],[648146,18],[648234,29],[648373,4],[648452,5],[648774,3],[649143,26],[649546,4],[649651,35],[650345,15],[651990,39],[652230,63],[653526,1],[654163,27],[654394,56],[655756,60],[655759,28],[656225,14],[656591,55],[656665,57],[657023,31],[657045,60],[657051,34],[657121,38],[657319,35],[657340,38],[657695,4],[657793,24],[657937,34],[659194,66],[659659,7],[659688,41],[659782,37],[660081,22],[660379,25],[660548,16],[662411,19],[662451,60],[662613,58],[662810,62],[663419,42],[664172,33],[664400,12],[664550,53],[664610,40],[664906,39],[665209,9],[665366,51],[665855,30],[666083,61],[666126,32],[666253,43],[666437,27],[666608,59],[666862,37],[667344,65],[667487,25],[668067,12],[668113,60],[668249,43],[669820,46],[669908,35],[670268,59],[670353,21],[670479,3],[670557,17],[671516,55],[672003,54],[672052,53],[672281,10],[672546,51],[672940,21],[673581,18],[673705,44],[673779,26],[674789,62],[675260,12],[676385,40],[676445,38],[677458,31],[679168,48],[679239,29],[680740,18],[680810,21],[681404,44],[681829,62],[681963,9],[682027,42],[682052,38],[682414,44],[683170,42],[683193,26],[683310,7],[683584,50],[683620,14],[684795,15],[685375,46],[685630,25],[686412,43],[686810,11],[686960,66],[687113,36],[687287,14],[687387,35],[687780,28],[687967,52],[689328,58],[689881,60],[689887,51],[690760,21],[691084,36],[691107,55],[691330,62],[691446,51],[691502,41],[691637,13],[692141,61],[692236,59],[692262,20],[692820,7],[693237,34],[693265,24],[693385,40],[693625,7],[694324,49],[694382,38],[694398,13],[694496,28],[695659,4],[695870,23],[696028,12],[697145,56],[697305,31],[698085,25],[699933,65],[700107,30],[700429,28],[700448,49],[700886,21],[701010,22],[701378,38],[702565,39],[703434,51],[703521,2],[703679,17],[705166,17],[705175,39],[706231,53],[707575,16],[707889,54],[708787,66],[708853,59],[711572,15],[712259,17],[712623,13],[712882,60],[713604,29],[714323,59],[714499,39],[714582,61],[716623,10],[716781,22],[717603,47],[717982,33],[718475,13],[718793,65],[720173,50],[720298,20],[720423,53],[720477,2],[720687,36],[721920,29],[722458,52],[722908,18],[723162,56],[723276,11],[723309,56],[723719,21],[723770,38],[724204,54],[724434,49],[724692,5],[725708,15],[725808,45],[725954,40],[726140,42],[726249,11],[726355,30],[726469,5],[726958,21],[727852,62],[728107,25],[729113,33],[729495,49],[729497,59],[730266,37],[730824,12],[731099,59],[731939,46],[732336,34],[732910,36],[733015,31],[733780,14],[734083,15],[734731,32],[735156,35],[735212,24],[735385,64],[735426,7],[735621,12],[735953,8],[735959,7],[736250,65],[736432,33],[736525,18],[737589,50],[737814,17],[737815,40],[737970,41],[738324,44],[738603,19],[739087,12],[739703,62],[739787,43],[740170,54],[740342,34],[740852,61],[741041,42],[741324,60],[742096,45],[742228,47],[742642,22],[743127,27],[743689,37],[743709,18],[743820,47],[744420,9],[744570,8],[745378,53],[745435,50],[745817,55],[746374,64],[746698,48],[748111,38],[748178,31],[748808,9],[749913,15],[749939,21],[750351,6],[750513,11],[750593,39],[750936,14],[751111,58],[751229,57],[751262,48],[751445,53],[751602,45],[751616,55],[751882,22],[752396,42],[752420,53],[752458,23],[752463,2],[753402,30],[753682,11],[755056,37],[755288,2],[755859,48],[756190,20],[757040,32],[757057,56],[757304,57],[757705,56],[758920,20],[759612,54],[759785,54],[761030,52],[761371,62],[761509,37],[761712,13],[761720,46],[762475,29],[762734,11],[763217,31],[763525,31],[764146,32],[764200,30],[764324,62],[764571,2],[764681,11],[765478,66],[765526,53],[765537,52],[765857,14],[766528,9],[767638,50],[767742,38],[767890,5],[768290,44],[768959,38],[769147,15],[769521,26],[769994,65],[770394,55],[770592,53],[771938,43],[773608,14],[773961,30],[774249,5],[774660,50],[774767,9],[775107,30],[775396,52],[776009,36],[776710,33],[776887,3],[777107,56],[777243,49],[778478,38],[779114,21],[779762,47],[779930,64],[779999,49],[780250,25],[780924,2],[782303,24],[782814,54],[783157,65],[783601,18],[784965,42],[785030,36],[785096,65],[785242,56],[785548,41],[785836,32],[786286,29],[786923,44],[787018,59],[787587,59],[787660,30],[788090,66],[788313,58],[788882,55],[789103,29],[789580,57],[790243,23],[790445,12],[791042,3],[791286,40],[791389,36],[791722,58],[791774,36],[792295,34],[792621,61],[792661,19],[793528,49],[793685,1],[793780,43],[794131,55],[794766,30],[794814,9],[795392,20],[795581,33],[797498,38],[797604,10],[798084,30],[798255,22],[798754,54],[798761,20],[799776,61],[799849,33],[800168,52],[800910,22],[801082,51],[801434,12],[801834,6],[802689,43],[803005,20],[803249,32],[803847,5],[804802,21],[805385,5],[805828,9],[805983,43],[807162,31],[807262,9],[807291,61],[807528,51],[807677,17],[807847,5],[808022,63],[808859,30],[808890,8],[809179,52],[810241,64],[810790,36],[811072,15],[811183,33],[812300,45],[812769,50],[813390,44],[815079,7],[815723,13],[816030,20],[816218,22],[816384,36],[816715,60],[816931,10],[817062,12],[817096,6],[817302,59],[817885,26],[818043,10],[818123,63],[819231,34],[820830,40],[821217,52],[821590,21],[822628,34],[822705,23],[822842,18],[823064,34],[823586,5],[824087,34],[824722,54],[824896,17],[825451,45],[825744,34],[825748,7],[825940,40],[826455,2],[826936,59],[827413,58],[827657,35],[828140,42],[828537,12],[828705,55],[829048,11],[829631,53],[829804,22],[830052,27],[830098,41],[830483,18],[830497,27],[830551,57],[831047,63],[831181,9],[832024,60],[832637,3],[832763,30],[833317,19],[833462,42],[833634,17],[833763,40],[833831,48],[833883,25],[834537,50],[834807,47],[834927,38],[835357,35],[835444,58],[835522,22],[835576,2],[835658,64],[835998,53],[836315,24],[836465,54],[836617,42],[836688,59],[836704,11],[836715,44],[838597,42],[838615,61],[839185,55],[839605,60],[840898,66],[841008,26],[843653,35],[844013,48],[844189,35],[845166,35],[845762,19],[847122,32],[847642,37],[847656,39],[847762,11],[848218,7],[849458,35],[849898,12],[851312,33],[851621,37],[852290,62],[852811,46],[853180,36],[853310,65],[853352,64],[853529,43],[853818,66],[854038,9],[855844,17],[856602,33],[856771,13],[858354,65],[858470,48],[858871,32],[858923,44],[859303,51],[859697,14],[859884,13],[859984,63],[860292,60],[860394,63],[860664,33],[860906,12],[861859,19],[861982,54],[862469,26],[862599,54],[864106,17],[864394,65],[864716,59],[865112,55],[865300,29],[865504,14],[866785,38],[866995,56],[868609,56],[869031,7],[869235,7],[869334,59],[869508,7],[869711,48],[869942,64],[870223,61],[870972,52],[871200,38],[871486,13],[871702,33],[871732,42],[872397,41],[872504,44],[872914,2],[873797,61],[874510,58],[874688,18],[876134,47],[876201,21],[876319,6],[878915,18],[880380,21],[880527,58],[881429,51],[881751,42],[882094,24],[882122,35],[883022,2],[884178,38],[884798,46],[884892,25],[885684,42],[886333,46],[886990,28],[887122,30],[887238,66],[887325,39],[887429,13],[888100,23],[888272,34],[888493,55],[888776,23],[889511,47],[889745,42],[889884,26],[890079,28],[891106,13],[891179,64],[891243,29],[892965,40],[893649,36],[893879,25],[894777,3],[894783,53],[894824,34],[895495,55],[895562,39],[895692,30],[895957,27],[896807,10],[897467,59],[897575,45],[897866,41],[898140,47],[899107,20],[899292,39],[899555,2],[900056,47],[900384,22],[900386,18],[901132,29],[901377,8],[901764,26],[901917,16],[902313,48],[902413,12],[902671,18],[902706,66],[902716,1],[904137,15],[904433,3],[904793,65],[905575,54],[905881,3],[906179,43],[906885,19],[907559,59],[907777,32],[907902,38],[908028,3],[908338,35],[909090,46],[909498,23],[910535,26],[910596,47],[911050,48],[911329,53],[913584,39],[913607,12],[913916,54],[914195,30],[914428,55],[915164,9],[915447,44],[915751,30],[917006,7],[918001,19],[918205,32],[918718,10],[919495,60],[919957,62],[920464,56],[920932,29],[921064,37],[921326,22],[921707,32],[922072,51],[922157,9],[922643,12],[923892,28],[923976,51],[924778,33],[924936,14],[925435,43],[925451,58],[925589,14],[926707,23],[927901,4],[928454,9],[929076,28],[929899,35],[930105,42],[930207,48],[930406,51],[930706,7],[931211,4],[931435,42],[931878,16],[932260,7],[932626,21],[932824,48],[932868,33],[932990,34],[933480,63],[933782,66],[934610,39],[934620,24],[934862,7],[935075,59],[935801,13],[936772,61],[936786,37],[936931,28],[937597,17],[937896,13],[938338,42],[939227,44],[939509,18],[939825,61],[940020,42],[940511,32],[941621,29],[942380,51],[943072,22],[943152,66],[943337,61],[944318,33],[944468,52],[944849,23],[945898,26],[945962,49],[946053,4],[946130,65],[947954,26],[949018,41],[949098,43],[949254,11],[949398,43],[949700,51],[949775,10],[949981,28],[950289,43],[950591,33],[950790,28],[950972,39],[952375,25],[952464,2],[952688,64],[952878,39],[953469,55],[953576,21],[954334,29],[955110,5],[955183,13],[955559,61],[955565,30],[955832,40],[955841,19],[955896,19],[957064,65],[957300,65],[957443,10],[957458,62],[957610,16],[957672,42],[958586,6],[958591,52],[958622,23],[960088,42],[961415,37],[962421,12],[962885,25],[963478,66],[963616,27],[963878,27],[963925,61],[964523,26],[964697,8],[965124,24],[965306,58],[965359,16],[965946,15],[966871,44],[967013,43],[967145,35],[967396,26],[967415,52],[967602,8],[967642,13],[967981,5],[968693,4],[969023,28],[969772,9],[969820,15],[970104,7],[970243,47],[970501,10],[970713,26],[971984,2],[972937,59],[973193,2],[973338,29],[973672,9],[974255,27],[974495,13],[974759,46],[975025,16],[976358,8],[976860,18],[976905,38],[977791,5],[978010,55],[978386,66],[978589,26],[978597,66],[979382,21],[980014,21],[980489,10],[981112,15],[981480,41],[981878,30],[982273,55],[983681,31],[983939,60],[984583,4],[984907,26],[984914,1],[985502,40],[985592,24],[985991,55],[986388,31],[987007,35],[987173,21],[987648,58],[988377,2],[989035,25],[989075,50],[989474,39],[989882,26],[989969,9],[990045,37],[990301,5],[991669,30],[993392,43],[993461,16],[993650,62],[994186,42],[994888,9],[995910,61],[996159,46],[997578,43],[997620,5],[997736,1],[997867,49],[997871,34],[998577,59],[999009,33],[999531,13]]))
