import collections

class Solution:
    # Second Attempt : Trying the solution from solution. DP
    def longestValidParentheses(self, s: str) -> int:
        n = len(s)
        dp = [0] * (n + 1)

        for i in range(1, n):
            if s[i] == ")" and s[i - 1] == "(":
                dp[i] = dp[i - 2] + 2
            elif s[i] == ")" and s[i - 1] == ")" and i - dp[i - 1] - 1 >=0 and s[i - dp[i - 1] - 1] == "(":
                dp[i] = dp[i - 1] + 2 + dp[i - dp[i - 1] - 2]

        return max(dp)

    # # Second Attempt : Was trying to create a simpler logic. TLE.
    # def longestValidParentheses(self, s: str) -> int:
    #     n = len(s)
    #     maxlen = 0
    #     ptr1, ptr2 = 0, 0
    #
    #     while ptr1 < n:
    #         ptr2 = ptr1
    #         last_match = ptr1
    #         if s[ptr2] == "(":
    #             score = 0
    #             while ptr2 < n:
    #                 prev_score = score
    #                 score += 1 if s[ptr2] == "(" else -1
    #                 if score == 0:
    #                     if prev_score > score:
    #                         last_match = ptr2
    #                         maxlen = max(maxlen, ptr2 - ptr1 + 1)
    #                     else:
    #                         break
    #                 ptr2 += 1
    #         ptr1 = last_match + 1
    #
    #     return maxlen


    # def longestValidParentheses(self, s: str) -> int:
    #     if not s:
    #         return 0
    #     tracker = [0] * len(s)
    #     newPairCount = len(s)
    #     while newPairCount > 0:
    #         newPairCount = 0
    #         startingIndex = 0
    #         while startingIndex < len(tracker):
    #             # find the next 0 pair.
    #             while startingIndex < len(tracker) and tracker[startingIndex] != 0:
    #                 startingIndex += 1
    #             endingIndex = startingIndex + 1
    #             while endingIndex < len(tracker) and tracker[endingIndex] != 0:
    #                 endingIndex += 1
    #             if startingIndex > len(tracker) - 1 or endingIndex > len(tracker) - 1:
    #                 break
    #             if s[startingIndex] == "(" and s[endingIndex] == ")":
    #                 newPairCount += 1
    #                 tracker[startingIndex] += 1
    #                 tracker[endingIndex] += 1
    #             startingIndex += 1
    #
    #     count = 0
    #     max = 0
    #     for i in tracker:
    #         if i == 0:
    #             count = 0
    #         else:
    #             count += 1
    #         if count > max:
    #             max = count
    #
    #     return max


    """
    Attempt #2
    I thought I could solve this with stacks. The logic was to follow a simple rule, if right > left, empty the stack.
    The max length would be the maximum length which can be formed in the stack of valid paranthesis,
    which would be the minimum number of brackets count of left or right times two.
    This falters in the case when ( comes in the middle. ()()((), this lets the stack form and max comes out to be 6, but is actually 4.
    """
    def longestValidParentheses(self, s: str) -> int:
        max_len = 0
        left_count, right_count = 0, 0

        for b in s:
            if b == '(':
                left_count += 1
            if b == ")":
                right_count += 1

            if right_count > left_count:
                left_count, right_count = 0, 0

            # if left_count == right_count:
            max_len = max(max_len, min(left_count, right_count) * 2)
        return max_len


    """
    Attempt #2
    """
    def longestValidParentheses(self, s: str) -> int:
        dp = [(0, 0) for _ in range(len(s) + 1)]
        left, right = 0, 0
        for index, char in enumerate(s):
            if char == '(':
                left += 1
            if char == ")":
                right += 1

            dp[index] = (left, right)

        max_len = 0

        for i in range(len(dp)):
            for j in range(i + 1, len(dp)):
                sl, sr, el, er = dp[i - 1][0], dp[i - 1][1], dp[j][0], dp[j][1]
                if s[i] == '(' and er - sr == el - sl:
                    current_len = (el - sl)
                    max_len = max(max_len, (el - sl) * 2)

        return max_len


    """
    Attempt #2:
    The idea for this came to me after two failed attempts above.
    The idea is that a valid parenthesis is formed either by adding to the outside ()() or inside (()),
    so we measure the 'depth' of the brackets on each closing bracket. For every closing bracket also measure which opening bracket is closes,
    and check the 'outer score' to see if this pair contributes to anything larger than itself.
    """
    def longestValidParentheses(self, s: str) -> int:
        dp = [0 for _ in range(len(s) + 1)]
        stack = []
        ans = 0

        for index, bracket in enumerate(s):
            if bracket == '(':
                stack.append(index)
            else:
                if stack:
                    top_index = stack.pop()
                    outer_score = dp[top_index - 1]
                    dp[index] =  dp[index - 1] + outer_score + 2
                ans = max(ans, dp[index])

        return ans

    """
    Attempt : Fire
    """
    def longestValidParentheses(self, s: str) -> int:
        dp = [0 for _ in range(len(s) + 1)]
        stack = []
        max_len = 0

        for i in range(len(s)):
            if s[i] == '(':
                stack.append(i)
            else:
                if stack:
                    my_bracket_index = stack.pop()
                    dp[i] = dp[i - 1] + 2 + dp[my_bracket_index - 1]
            max_len = max(max_len, dp[i])
        return max_len


if __name__ == '__main__':
    print(Solution().longestValidParentheses("(()"))
    print(Solution().longestValidParentheses(")()())"))
    print(Solution().longestValidParentheses("()(())"))
    print(Solution().longestValidParentheses("(()))())("))
    print(Solution().longestValidParentheses(""))
    print(Solution().longestValidParentheses(")()())()()("))
    print(Solution().longestValidParentheses("))))())()()(()"))
    print(Solution().longestValidParentheses
