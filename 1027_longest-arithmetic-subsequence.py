import collections
import functools


class Solution:
    def longestArithSeqLength(self, nums) -> int:
        n = len(nums)
        ans = 2
        numbers_ahead = {}
        temp_map = {}
        for i in range(n - 1, -1, -1):
            numbers_ahead[i] = temp_map.copy()
            temp_map[nums[i]] = i

        @functools.lru_cache(None)
        def longestASL(index, diff):
            next_number = nums[index] + diff
            if next_number in numbers_ahead[index]:
                return 1 + longestASL(numbers_ahead[index][next_number], diff)
            else:
                return 1

        for i in range(n):
            for j in range(i + 1, n):
                diff = nums[j] - nums[i]
                length = 1 + longestASL(j, diff)
                ans = max(ans, length)

        return ans

    """
    Attempt #2
    Accepted : 13%
    This is awesome because I could not solve this question last time.
    This is a good question of forward lookup. We need to find the next arithmetic number and diff combination, and try and form a chain.  
    """
    def longestArithSeqLength(self, nums) -> int:
        n = len(nums)
        ans = 2
        numbers_ahead = collections.defaultdict(lambda: 1)

        for i in range(n - 1, -1, -1):
            visited = set()
            for j in range(i + 1, n):
                diff = nums[j] - nums[i]
                if (nums[j], diff) in visited:
                    continue
                numbers_ahead[(nums[i], diff)] = numbers_ahead[(nums[j], diff)] + 1
                visited.add((nums[i], diff))
                ans = max(ans, numbers_ahead[(nums[i], diff)])

        return ans

    def longestArithSeqLength(self, nums) -> int:
        n = len(nums)
        ans = 2
        numbers_ahead = {}

        for i in range(n - 1, -1, -1):
            visited = set()
            for j in range(i + 1, n):
                diff = nums[j] - nums[i]
                if (nums[j], diff) in visited:
                    continue
                if (nums[j], diff) in numbers_ahead:
                    numbers_ahead[(nums[i], diff)] = numbers_ahead[(nums[j], diff)] + 1
                else:
                    numbers_ahead[(nums[i], diff)] = 2
                visited.add((nums[i], diff))
                ans = max(ans, numbers_ahead[(nums[i], diff)])

        return ans

    """
    Attempt: Fired
    Accepted: 82%
    """
    def longestArithSeqLength(self, nums) -> int:
        n = len(nums)
        ans = 2
        numbers_ahead = collections.defaultdict(int)

        for i in range(n - 2, -1, -1):
            visited = set()
            for j in range(i + 1, n):
                a, d = nums[i], nums[j] - nums[i]
                if d in visited:
                    continue
                visited.add(d)
                if (a + d, d) in numbers_ahead:
                    numbers_ahead[(a, d)] = max(numbers_ahead[(a, d)], numbers_ahead[(a + d, d)] + 1)
                else:
                    numbers_ahead[(a, d)] = 2
                ans = max(ans, numbers_ahead[(a, d)])

        return ans


if __name__ == '__main__':
    print(Solution().longestArithSeqLength(nums = [3,6,9,12]))
    print(Solution().longestArithSeqLength(nums = [9,4,7,2,10]))
    print(Solution().longestArithSeqLength(nums = [20,1,15,3,10,5,8]))
    print(Solution().longestArithSeqLength([0,1,1,1,0,1]))
    print(Solution().longestArithSeqLength([0,1,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0,1,1,1,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0,0,0,0,0,1,1,1,0,1,0,1,0,0,0,0,1,1,1,0,0,0,1,1,1,1,1,0,0,1,0,1,0,1,0,0,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,0,1,0,1,1,0,1,1,0,1,1,1,1,0,0,0,1,1,1,1,1,0,1,1,0,0,0,1,0,0,1,1,1,1,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,1,0,0,0,1,1,1,1,0,1,1,0,0,0,0,1,0,1,1,1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,0,0,1,0,1,0,0,0,0,1,0,0,1,0,1,1,0,0,0,0,1,0,1,1,0,0,0,1,0,1,0,0,1,0,1,0,1,0,0,0,1,0,1,1,1,1,1,0,0,1,0,1,1,1,1,1,0,1,1,1,0,0,0,0,1,0,0,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,1,1,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,1,0,1,1,0,0,1,0,1,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,0,1,0,0,1,1,0,1,0,1,0,1,0,1,0,0,0,1,0,1,1,0,0,0,0,1,1,1,0,0,0,1,1,0,1,0,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,0,1,0,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,0,1,0,1,0,1,1,1,0,0,0,0,1,1,1,0,1,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,1,0,0,0,0,1,0,0,1,1,0,0,1,1,1,0,0,1,0,0,1,0,0,1,1,1,0,0,1,1,1,1,0,0,0,1,1,1,0,0,1,0,1,0,1,1,0,1,0,0,0,0,0,1,1,0,0,0,1,1,1,1,0,1,0,1,1,1,1,1,1,0,0,1,0,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,0,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,1,0,1,0,0,1,0,0,0,0,1,1,1,0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,0,0,1,0,0,1,1,1,1,0,0,1,0]))
    print(Solution().longestArithSeqLength([1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,137,141,145,149,153,157,161,165,169,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,249,253,257,261,265,269,273,277,281,285,289,293,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,137,141,145,149,153,157,161,165,169,173,177,181,185,189,193,197,201,205,209,213,217,221,225,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,137,141,145,149,153,157,161,165,169,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,249,253,257,261,265,269,273,277,281,285,289,293,297,301,305,309,313,317,321,325,329,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,101,105,109,113,117,121,125,129,133,137,141,145,149,153,157,161,165,169,173,177,181,185,189,193,197,201,205,209,213,217,221,225,229,233,237,241,245,249,253,257,261,265,269,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,376,381,386,391,396,401,406,411,416,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,156,161,166,171,176,181,186,191,196,201,206,211,216,221,226,231,236,241,246,251,256,261,266,271,276,281,286,291,296,301,306,311,316,321,326,331,336,341,346,351,356,361,366,371,376,381,386,391,396,401,406,411,416,421,426,431,436,441,446,451,456,461,466,471,476,481,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,1,1,1,1,1,1,1,1,1,1,1,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,1,2,3,4,5,6,7,8,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,142,145,148,151,154,1,4,7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130,133,136,139,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,9,13,17,21,25,29,33,37,41,45,49,53,57,61,65,69,73,77,81,85,89,93,97,1,2,3,4,5,6,7,8,9,10,11,12,13,1,6,11,16,21,26,31,36,41,46,51,56,61,66,71,76,81,86,91,96,101,106,111,116,121,126,131,136,141,146,151,1]))
